--  part of OpenGLAda, (c) 2017 Felix Krause
--  released under the terms of the MIT license, see the file "COPYING"
--  Autogenerated by Generate, do not edit
with GL.Attributes;
with GL.Blending;
with GL.Buffers;
with GL.Culling;
with GL.Enums.Getter;
with GL.Enums.Textures;
with GL.Errors;
with GL.Fixed.Textures;
with GL.Fixed.Lighting;
with GL.Framebuffer;
with GL.Low_Level.Enums;
with GL.Objects.Textures;
with GL.Objects.Buffers;
with GL.Objects.Framebuffers;
with GL.Objects.Programs;
with GL.Objects.Shaders;
with GL.Pixels;
with GL.Rasterization;
with GL.Toggles;
with GL.Types.Colors;
with GL.Uniforms;
with Interfaces.C.Strings;
with System;
private package GL.API is
   pragma Preelaborate;
   use GL.Types;
   type T1 is access procedure (P1 : Attributes.Attribute; P2 : Double);
   pragma Convention (StdCall, T1);
   type T2 is access procedure (P1 : Attributes.Attribute; P2, P3 : Double);
   pragma Convention (StdCall, T2);
   type T3 is access procedure (P1 : Attributes.Attribute; P2 : Types.Doubles.Vector2);
   pragma Convention (StdCall, T3);
   type T4 is access procedure (P1 : Attributes.Attribute; P2, P3, P4 : Double);
   pragma Convention (StdCall, T4);
   type T5 is access procedure (P1 : Attributes.Attribute; P2 : Types.Doubles.Vector3);
   pragma Convention (StdCall, T5);
   type T6 is access procedure (P1 : Attributes.Attribute; P2, P3, P4, P5 : Double);
   pragma Convention (StdCall, T6);
   type T7 is access procedure (P1 : Attributes.Attribute; P2 : Types.Doubles.Vector4);
   pragma Convention (StdCall, T7);
   type T8 is access procedure (P1 : Uniforms.Uniform; P2 : Int);
   pragma Convention (StdCall, T8);
   type T9 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Int_Array);
   pragma Convention (StdCall, T9);
   type T10 is access procedure (P1 : Uniforms.Uniform; P2, P3 : Int);
   pragma Convention (StdCall, T10);
   type T11 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Ints.Vector2_Array);
   pragma Convention (StdCall, T11);
   type T12 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4 : Int);
   pragma Convention (StdCall, T12);
   type T13 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Ints.Vector3_Array);
   pragma Convention (StdCall, T13);
   type T14 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4, P5 : Int);
   pragma Convention (StdCall, T14);
   type T15 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Ints.Vector4_Array);
   pragma Convention (StdCall, T15);
   type T16 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Ints.Matrix2_Array);
   pragma Convention (StdCall, T16);
   type T17 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Ints.Matrix3_Array);
   pragma Convention (StdCall, T17);
   type T18 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Ints.Matrix4_Array);
   pragma Convention (StdCall, T18);
   type T19 is access procedure (P1 : Attributes.Attribute; P2 : Int);
   pragma Convention (StdCall, T19);
   type T20 is access procedure (P1 : Attributes.Attribute; P2, P3 : Int);
   pragma Convention (StdCall, T20);
   type T21 is access procedure (P1 : Attributes.Attribute; P2 : Types.Ints.Vector2);
   pragma Convention (StdCall, T21);
   type T22 is access procedure (P1 : Attributes.Attribute; P2, P3, P4 : Int);
   pragma Convention (StdCall, T22);
   type T23 is access procedure (P1 : Attributes.Attribute; P2 : Types.Ints.Vector3);
   pragma Convention (StdCall, T23);
   type T24 is access procedure (P1 : Attributes.Attribute; P2, P3, P4, P5 : Int);
   pragma Convention (StdCall, T24);
   type T25 is access procedure (P1 : Attributes.Attribute; P2 : Types.Ints.Vector4);
   pragma Convention (StdCall, T25);
   type T26 is access procedure (P1 : Attributes.Attribute; P2 : Short);
   pragma Convention (StdCall, T26);
   type T27 is access procedure (P1 : Attributes.Attribute; P2, P3 : Short);
   pragma Convention (StdCall, T27);
   type T28 is access procedure (P1 : Attributes.Attribute; P2 : Shorts.Vector2);
   pragma Convention (StdCall, T28);
   type T29 is access procedure (P1 : Attributes.Attribute; P2, P3, P4 : Short);
   pragma Convention (StdCall, T29);
   type T30 is access procedure (P1 : Attributes.Attribute; P2 : Shorts.Vector3);
   pragma Convention (StdCall, T30);
   type T31 is access procedure (P1 : Attributes.Attribute; P2, P3, P4, P5 : Short);
   pragma Convention (StdCall, T31);
   type T32 is access procedure (P1 : Attributes.Attribute; P2 : Shorts.Vector4);
   pragma Convention (StdCall, T32);
   type T33 is access procedure (P1 : Uniforms.Uniform; P2 : Single);
   pragma Convention (StdCall, T33);
   type T34 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Single_Array);
   pragma Convention (StdCall, T34);
   type T35 is access procedure (P1 : Uniforms.Uniform; P2, P3 : Single);
   pragma Convention (StdCall, T35);
   type T36 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Singles.Vector2_Array);
   pragma Convention (StdCall, T36);
   type T37 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4 : Single);
   pragma Convention (StdCall, T37);
   type T38 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Singles.Vector3_Array);
   pragma Convention (StdCall, T38);
   type T39 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4, P5 : Single);
   pragma Convention (StdCall, T39);
   type T40 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Types.Singles.Vector4_Array);
   pragma Convention (StdCall, T40);
   type T41 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Singles.Matrix2_Array);
   pragma Convention (StdCall, T41);
   type T42 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Singles.Matrix3_Array);
   pragma Convention (StdCall, T42);
   type T43 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : Types.Singles.Matrix4_Array);
   pragma Convention (StdCall, T43);
   type T44 is access procedure (P1 : Attributes.Attribute; P2 : Single);
   pragma Convention (StdCall, T44);
   type T45 is access procedure (P1 : Attributes.Attribute; P2, P3 : Single);
   pragma Convention (StdCall, T45);
   type T46 is access procedure (P1 : Attributes.Attribute; P2 : Types.Singles.Vector2);
   pragma Convention (StdCall, T46);
   type T47 is access procedure (P1 : Attributes.Attribute; P2, P3, P4 : Single);
   pragma Convention (StdCall, T47);
   type T48 is access procedure (P1 : Attributes.Attribute; P2 : Types.Singles.Vector3);
   pragma Convention (StdCall, T48);
   type T49 is access procedure (P1 : Attributes.Attribute; P2, P3, P4, P5 : Single);
   pragma Convention (StdCall, T49);
   type T50 is access procedure (P1 : Attributes.Attribute; P2 : Types.Singles.Vector4);
   pragma Convention (StdCall, T50);
   type T51 is access procedure (P1 : Uniforms.Uniform; P2 : UInt);
   pragma Convention (StdCall, T51);
   type T52 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : UInt_Array);
   pragma Convention (StdCall, T52);
   type T53 is access procedure (P1 : Uniforms.Uniform; P2, P3 : UInt);
   pragma Convention (StdCall, T53);
   type T54 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : UInts.Vector2_Array);
   pragma Convention (StdCall, T54);
   type T55 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4 : UInt);
   pragma Convention (StdCall, T55);
   type T56 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : UInts.Vector3_Array);
   pragma Convention (StdCall, T56);
   type T57 is access procedure (P1 : Uniforms.Uniform; P2, P3, P4, P5 : UInt);
   pragma Convention (StdCall, T57);
   type T58 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : UInts.Vector4_Array);
   pragma Convention (StdCall, T58);
   type T59 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : UInts.Matrix2_Array);
   pragma Convention (StdCall, T59);
   type T60 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : UInts.Matrix3_Array);
   pragma Convention (StdCall, T60);
   type T61 is access procedure (P1 : Uniforms.Uniform; P2 : Size; P3 : Low_Level.Bool; P4 : UInts.Matrix4_Array);
   pragma Convention (StdCall, T61);
   type T62 is access procedure (P1 : Attributes.Attribute; P2 : UInt);
   pragma Convention (StdCall, T62);
   type T63 is access procedure (P1 : Attributes.Attribute; P2, P3 : UInt);
   pragma Convention (StdCall, T63);
   type T64 is access procedure (P1 : Attributes.Attribute; P2 : UInts.Vector2);
   pragma Convention (StdCall, T64);
   type T65 is access procedure (P1 : Attributes.Attribute; P2, P3, P4 : UInt);
   pragma Convention (StdCall, T65);
   type T66 is access procedure (P1 : Attributes.Attribute; P2 : UInts.Vector3);
   pragma Convention (StdCall, T66);
   type T67 is access procedure (P1 : Attributes.Attribute; P2, P3, P4, P5 : UInt);
   pragma Convention (StdCall, T67);
   type T68 is access procedure (P1 : Attributes.Attribute; P2 : UInts.Vector4);
   pragma Convention (StdCall, T68);
   type T69 is access function (P1 : Enums.Getter.String_Parameter; P2 : UInt) return C.Strings.chars_ptr;
   pragma Convention (StdCall, T69);
   type T70 is access procedure (P1 : Colors.Color);
   pragma Convention (StdCall, T70);
   type T71 is access procedure (P1 : Double);
   pragma Convention (StdCall, T71);
   type T72 is access procedure (P1 : Connection_Mode; P2 : Size; P3 : Size; P4 : Size);
   pragma Convention (StdCall, T72);
   type T73 is access procedure (P1 : Connection_Mode; P2 : Size; P3 : Unsigned_Numeric_Type; P4 : Low_Level.IntPtr; P5 : Size);
   pragma Convention (StdCall, T73);
   type T74 is access procedure (P1 : Connection_Mode; P2 : UInt; P3 : Unsigned_Numeric_Type; P4 : UInt; P5 : Int);
   pragma Convention (StdCall, T74);
   type T75 is access procedure (P1 : UInt);
   pragma Convention (StdCall, T75);
   type T76 is access procedure (P1 : GL.Attributes.Attribute; P2 : UInt);
   pragma Convention (StdCall, T76);
   type T77 is access procedure (P1 : Buffers.Draw_Buffer_Index; P2, P3 : Blending.Blend_Factor);
   pragma Convention (StdCall, T77);
   type T78 is access procedure (P1, P2, P3, P4 : Blending.Blend_Factor);
   pragma Convention (StdCall, T78);
   type T79 is access procedure (P1 : Buffers.Draw_Buffer_Index; P2, P3, P4, P5 : Blending.Blend_Factor);
   pragma Convention (StdCall, T79);
   type T80 is access procedure (P1, P2, P3, P4 : Colors.Component);
   pragma Convention (StdCall, T80);
   type T81 is access procedure (P1 : Blending.Equation);
   pragma Convention (StdCall, T81);
   type T82 is access procedure (P1 : Buffers.Draw_Buffer_Index; P2 : Blending.Equation);
   pragma Convention (StdCall, T82);
   type T83 is access procedure (P1, P2 : Blending.Equation);
   pragma Convention (StdCall, T83);
   type T84 is access procedure (P1 : Buffers.Draw_Buffer_Index; P2, P3 : Blending.Equation);
   pragma Convention (StdCall, T84);
   type T85 is access procedure (P1 : Enums.Point_Param; P2 : Single);
   pragma Convention (StdCall, T85);
   type T86 is access procedure (P1 : UInt; P2 : Buffers.Explicit_Color_Buffer_List);
   pragma Convention (StdCall, T86);
   type T87 is access procedure (P1 : Buffers.Color_Buffer_Selector; P2 : Low_Level.Zero; P3 : Colors.Color);
   pragma Convention (StdCall, T87);
   type T88 is access procedure (P1 : Low_Level.Enums.Only_Color_Buffer; P2 : Buffers.Draw_Buffer_Index; P3 : Colors.Color);
   pragma Convention (StdCall, T88);
   type T89 is access procedure (P1 : Low_Level.Enums.Only_Depth_Buffer; P2 : Low_Level.Zero; P3 : access constant Buffers.Depth);
   pragma Convention (StdCall, T89);
   type T90 is access procedure (P1 : Low_Level.Enums.Only_Stencil_Buffer; P2 : Low_Level.Zero; P3 : access constant Buffers.Stencil_Index);
   pragma Convention (StdCall, T90);
   type T91 is access procedure (P1 : Low_Level.Enums.Only_Depth_Stencil_Buffer; P2 : Low_Level.Zero; P3 : Buffers.Depth; P4 : Buffers.Stencil_Index);
   pragma Convention (StdCall, T91);
   type T92 is access procedure (P1 : Culling.Face_Selector; P2 : Compare_Function; P3 : Int; P4 : UInt);
   pragma Convention (StdCall, T92);
   type T93 is access procedure (P1 : Culling.Face_Selector; P2, P3, P4 : Buffers.Stencil_Action);
   pragma Convention (StdCall, T93);
   type T94 is access procedure (P1 : Culling.Face_Selector; P2 : UInt);
   pragma Convention (StdCall, T94);
   type T95 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4 : Size; P5 : Low_Level.Zero; P6 : Size; P7 : Objects.Textures.Image_Source);
   pragma Convention (StdCall, T95);
   type T96 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3, P4 : Int; P5, P6 : Size; P7 : Pixels.Data_Format; P8 : Pixels.Data_Type; P9 : Objects.Textures.Image_Source);
   pragma Convention (StdCall, T96);
   type T97 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4 : Size);
   pragma Convention (StdCall, T97);
   type T98 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4, P5 : Size; P6 : Low_Level.Zero; P7 : Size; P8 : Objects.Textures.Image_Source);
   pragma Convention (StdCall, T98);
   type T99 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4, P5 : Size);
   pragma Convention (StdCall, T99);
   type T100 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4, P5, P6 : Size; P7 : Low_Level.Zero; P8 : Pixels.Data_Format; P9 : Pixels.Data_Type; P10 : Objects.Textures.Image_Source);
   pragma Convention (StdCall, T100);
   type T101 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4, P5, P6 : Size; P7 : Low_Level.Zero; P8 : Size; P9 : Objects.Textures.Image_Source);
   pragma Convention (StdCall, T101);
   type T102 is access procedure (P1 : Low_Level.Enums.Texture_Kind; P2 : Objects.Textures.Mipmap_Level; P3 : Pixels.Internal_Format; P4, P5, P6 : Size);
   pragma Convention (StdCall, T102);
   type T103 is access procedure (P1 : Int);
   pragma Convention (StdCall, T103);
   type T104 is access procedure (P1 : Low_Level.Enums.Texture_Kind);
   pragma Convention (StdCall, T104);
   type T105 is access procedure (P1 : UInt; P2 : Objects.Textures.Mipmap_Level);
   pragma Convention (StdCall, T105);
   type T106 is access procedure (P1 : UInt; P2 : Objects.Textures.Mipmap_Level; P3, P4, P5 : Int; P6, P7, P8 : Size);
   pragma Convention (StdCall, T106);
   type T107 is access procedure (P1 : Size; P2 : out UInt);
   pragma Convention (StdCall, T107);
   type T108 is access procedure (P1 : Size; P2 : Low_Level.UInt_Array);
   pragma Convention (StdCall, T108);
   type T109 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : UInt);
   pragma Convention (StdCall, T109);
   type T110 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : UInt; P3 : UInt);
   pragma Convention (StdCall, T110);
   type T111 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Low_Level.SizeIPtr; P3 : System.Address; P4 : Objects.Buffers.Buffer_Usage);
   pragma Convention (StdCall, T111);
   type T112 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Pixels.Internal_Format; P3 : UInt);
   pragma Convention (StdCall, T112);
   type T113 is access function (P1 : Low_Level.Enums.Buffer_Kind; P2 : Objects.Access_Kind) return System.Address;
   pragma Convention (StdCall, T113);
   type T114 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Enums.Buffer_Pointer_Param; P3 : out System.Address);
   pragma Convention (StdCall, T114);
   type T115 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Low_Level.IntPtr; P3 : Low_Level.SizeIPtr; P4 : System.Address);
   pragma Convention (StdCall, T115);
   type T116 is access procedure (P1 : Low_Level.Enums.Buffer_Kind);
   pragma Convention (StdCall, T116);
   type T117 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Enums.Buffer_Param; P3 : out Objects.Access_Kind);
   pragma Convention (StdCall, T117);
   type T118 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Enums.Buffer_Param; P3 : out Low_Level.Bool);
   pragma Convention (StdCall, T118);
   type T119 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Enums.Buffer_Param; P3 : out Size);
   pragma Convention (StdCall, T119);
   type T120 is access procedure (P1 : Low_Level.Enums.Buffer_Kind; P2 : Enums.Buffer_Param; P3 : out Objects.Buffers.Buffer_Usage);
   pragma Convention (StdCall, T120);
   type T121 is access procedure (P1 : UInt);
   pragma Convention (StdCall, T121);
   type T122 is access procedure (P1 : UInt; P2 : Low_Level.IntPtr; P3 : Low_Level.SizeIPtr);
   pragma Convention (StdCall, T122);
   type T123 is access procedure (P1 : Size; P2 : out UInt);
   pragma Convention (StdCall, T123);
   type T124 is access procedure (P1 : Size; P2 : Low_Level.UInt_Array);
   pragma Convention (StdCall, T124);
   type T125 is access procedure (P1 : UInt);
   pragma Convention (StdCall, T125);
   type T126 is access procedure (P1 : Size; P2 : out UInt);
   pragma Convention (StdCall, T126);
   type T127 is access procedure (P1 : Size; P2 : Low_Level.UInt_Array);
   pragma Convention (StdCall, T127);
   type T128 is access procedure (P1 : Low_Level.Enums.Renderbuffer_Kind; P2 : Pixels.Internal_Format; P3, P4 : Size);
   pragma Convention (StdCall, T128);
   type T129 is access procedure (P1 : Low_Level.Enums.Renderbuffer_Kind; P2 : Size; P3 : Pixels.Internal_Format; P4, P5 : Size);
   pragma Convention (StdCall, T129);
   type T130 is access procedure (P1 : Low_Level.Enums.Renderbuffer_Kind; P2 : UInt);
   pragma Convention (StdCall, T130);
   type T131 is access procedure (P1 : Low_Level.Enums.Renderbuffer_Kind; P2 : Enums.Getter.Renderbuffer_Parameter; P3 : out Int);
   pragma Convention (StdCall, T131);
   type T132 is access procedure (P1 : Low_Level.Enums.Renderbuffer_Kind; P2 : Enums.Getter.Renderbuffer_Parameter; P3 : out Pixels.Internal_Format);
   pragma Convention (StdCall, T132);
   type T133 is access procedure (P1 : Enums.Clamp_Color_Param; P2 : Low_Level.Bool);
   pragma Convention (StdCall, T133);
   type T134 is access procedure (P1 : Size; P2 : out UInt);
   pragma Convention (StdCall, T134);
   type T135 is access procedure (P1 : Size; P2 : Low_Level.UInt_Array);
   pragma Convention (StdCall, T135);
   type T136 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : UInt);
   pragma Convention (StdCall, T136);
   type T137 is access function (P1 : Low_Level.Enums.Framebuffer_Kind) return Objects.Framebuffers.Framebuffer_Status;
   pragma Convention (StdCall, T137);
   type T138 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Objects.Framebuffers.Attachment_Point; P3 : Low_Level.Enums.Renderbuffer_Kind; P4 : UInt);
   pragma Convention (StdCall, T138);
   type T139 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Objects.Framebuffers.Attachment_Point; P3 : UInt; P4 : Objects.Textures.Mipmap_Level);
   pragma Convention (StdCall, T139);
   type T140 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Objects.Framebuffers.Attachment_Point; P3 : UInt; P4 : Objects.Textures.Mipmap_Level; P5 : Int);
   pragma Convention (StdCall, T140);
   type T141 is access procedure (P1, P2, P3, P4, P5, P6, P7, P8 : Int; P9 : Low_Level.Bitfield; P10 : Objects.Textures.Magnifying_Function);
   pragma Convention (StdCall, T141);
   type T142 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Size; P3 : Objects.Framebuffers.Attachment_List);
   pragma Convention (StdCall, T142);
   type T143 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Size; P3 : Objects.Framebuffers.Attachment_List; P4, P5 : Int; P6, P7 : Size);
   pragma Convention (StdCall, T143);
   type T144 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Enums.Framebuffer_Param; P3 : Size);
   pragma Convention (StdCall, T144);
   type T145 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Enums.Framebuffer_Param; P3 : Low_Level.Bool);
   pragma Convention (StdCall, T145);
   type T146 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Enums.Framebuffer_Param; P3 : out Size);
   pragma Convention (StdCall, T146);
   type T147 is access procedure (P1 : Low_Level.Enums.Framebuffer_Kind; P2 : Enums.Framebuffer_Param; P3 : out Low_Level.Bool);
   pragma Convention (StdCall, T147);
   type T148 is access procedure (P1 : UInt; P2 : Enums.Shader_Param; P3 : out Int);
   pragma Convention (StdCall, T148);
   type T149 is access procedure (P1 : UInt; P2 : Enums.Shader_Param; P3 : out Objects.Shaders.Shader_Type);
   pragma Convention (StdCall, T149);
   type T150 is access function (P1 : Objects.Shaders.Shader_Type) return UInt;
   pragma Convention (StdCall, T150);
   type T151 is access procedure (P1 : UInt);
   pragma Convention (StdCall, T151);
   type T152 is access procedure (P1 : UInt; P2 : Size; P3 : Low_Level.Char_Access_Array; P4 : Low_Level.Int_Array);
   pragma Convention (StdCall, T152);
   type T153 is access procedure (P1 : UInt; P2 : Size; P3 : out Size; P4 : in out String);
   pragma Convention (StdCall, T153);
   type T154 is access procedure;
   pragma Convention (StdCall, T154);
   type T155 is access function return UInt;
   pragma Convention (StdCall, T155);
   type T156 is access procedure (P1 : UInt);
   pragma Convention (StdCall, T156);
   type T157 is access procedure (P1 : UInt; P2 : Enums.Program_Param; P3 : out Int);
   pragma Convention (StdCall, T157);
   type T158 is access procedure (P1, P2 : UInt);
   pragma Convention (StdCall, T158);
   type T159 is access procedure (P1 : UInt; P2 : Size; P3 : out Size; P4 : in out String);
   pragma Convention (StdCall, T159);
   type T160 is access procedure (P1 : UInt; P2 : Objects.Shaders.Shader_Type; P3 : Enums.Program_Stage_Param; P4 : out Size);
   pragma Convention (StdCall, T160);
   type T161 is access function (P1 : UInt; P2 : Objects.Shaders.Shader_Type; P3 : Interfaces.C.char_array) return Objects.Programs.Subroutine_Index_Type;
   pragma Convention (StdCall, T161);
   type T162 is access function (P1 : UInt; P2 : Objects.Shaders.Shader_Type; P3 : Interfaces.C.char_array) return Objects.Programs.Uniform_Location_Type;
   pragma Convention (StdCall, T162);
   type T163 is access function (P1 : UInt; P2 : C.char_array) return Uniforms.Uniform;
   pragma Convention (StdCall, T163);
   type T164 is access procedure (P1 : UInt; P2 : Attributes.Attribute; P3 : C.char_array);
   pragma Convention (StdCall, T164);
   type T165 is access function (P1 : UInt; P2 : C.char_array) return Attributes.Attribute;
   pragma Convention (StdCall, T165);
   type T166 is access procedure (P1 : Attributes.Attribute; P2 : Component_Count; P3 : Numeric_Type; P4 : Low_Level.Bool; P5 : Size; P6 : Int);
   pragma Convention (StdCall, T166);
   type T167 is access procedure (P1 : Attributes.Attribute; P2 : Component_Count; P3 : Numeric_Type; P4 : Size; P5 : Int);
   pragma Convention (StdCall, T167);
   type T168 is access procedure (P1 : Attributes.Attribute);
   pragma Convention (StdCall, T168);
   type T169 is access procedure (P1 : UInt; P2 : Size; P3 : out Size; P4 : in out UInt_Array);
   pragma Convention (StdCall, T169);
   type T170 is access procedure (P1 : UInt; P2 : Buffers.Draw_Buffer_Index; P3 : Interfaces.C.char_array);
   pragma Convention (StdCall, T170);
   type T171 is access function (P1 : UInt; P2 : Interfaces.C.char_array) return Int;
   pragma Convention (StdCall, T171);
   type T172 is access procedure (P1 : Connection_Mode);
   pragma Convention (StdCall, T172);
   type T173 is access procedure (P1 : UInt; P2 : Int; P3 : Size; P4 : out Size; P5 : out Size; P6 : out GL.Objects.Programs.Buffer_Mode; P7 : in out Interfaces.C.char_array);
   pragma Convention (StdCall, T173);
   type T174 is access procedure (P1 : UInt; P2 : Size; P3 : Low_Level.Char_Access_Array; P4 : GL.Objects.Programs.Buffer_Mode);
   pragma Convention (StdCall, T174);
   type T175 is access procedure (P1 : Enums.Patch_Parameter_Int; P2 : Int);
   pragma Convention (StdCall, T175);
   type T176 is access procedure (P1 : Enums.Patch_Parameter_Float_Array; P2 : Types.Single_Array);
   pragma Convention (StdCall, T176);
   function Get_Error return Errors.Error_Code;
   pragma Import (StdCall, Get_Error, "glGetError");
   procedure Flush;
   pragma Import (StdCall, Flush, "glFlush");
   procedure Finish;
   pragma Import (StdCall, Finish, "glFinish");
   procedure Get_Boolean (Name : Enums.Getter.Parameter; Target : access Low_Level.Bool);
   pragma Import (StdCall, Get_Boolean, "glGetBooleanv");
   procedure Get_Double (Name : Enums.Getter.Parameter; Target : access Double);
   pragma Import (StdCall, Get_Double, "glGetDoublev");
   procedure Get_Double_Vec2 (Name : Enums.Getter.Parameter; Target : in out Doubles.Vector2);
   pragma Import (StdCall, Get_Double_Vec2, "glGetDoublev");
   procedure Get_Single (Name : Enums.Getter.Parameter; Target : access Single);
   pragma Import (StdCall, Get_Single, "glGetFloatv");
   procedure Get_Single_Vec2 (Name : Enums.Getter.Parameter; Target : in out Singles.Vector2);
   pragma Import (StdCall, Get_Single_Vec2, "glGetFloatv");
   procedure Get_Color (Name : Enums.Getter.Parameter; Target : in out Colors.Color);
   pragma Import (StdCall, Get_Color, "glGetFloatv");
   procedure Get_Integer (Name : Enums.Getter.Parameter; Target : access Int);
   pragma Import (StdCall, Get_Integer, "glGetIntegerv");
   procedure Get_Int_Vec4 (Name : Enums.Getter.Parameter; Target : in out Ints.Vector4);
   pragma Import (StdCall, Get_Int_Vec4, "glGetIntegerv");
   procedure Get_Unsigned_Integer (Name : Enums.Getter.Parameter; Target : access UInt);
   pragma Import (StdCall, Get_Unsigned_Integer, "glGetIntegerv");
   procedure Get_Size (Name : Enums.Getter.Parameter; Target : access Size);
   pragma Import (StdCall, Get_Size, "glGetIntegerv");
   procedure Get_Color_Control (Name : Enums.Getter.Parameter; Target : access Fixed.Lighting.Color_Control);
   pragma Import (StdCall, Get_Color_Control, "glGetIntegerv");
   procedure Get_Shade_Model (Name : Enums.Getter.Parameter; Target : access Fixed.Lighting.Shade_Model);
   pragma Import (StdCall, Get_Shade_Model, "glGetIntegerv");
   procedure Get_Blend_Factor (Name : Enums.Getter.Parameter; Target : access Blending.Blend_Factor);
   pragma Import (StdCall, Get_Blend_Factor, "glGetIntegerv");
   procedure Get_Alignment (Name : Enums.Getter.Parameter; Target : access Pixels.Alignment);
   pragma Import (StdCall, Get_Alignment, "glGetIntegerv");
   procedure Get_Blend_Equation (Name : Enums.Getter.Parameter; Target : access Blending.Equation);
   pragma Import (StdCall, Get_Blend_Equation, "glGetIntegerv");
   procedure Get_Compare_Function (Name : Enums.Getter.Parameter; Target : access Compare_Function);
   pragma Import (StdCall, Get_Compare_Function, "glGetIntegerv");
   procedure Get_Orientation (Name : Enums.Getter.Parameter; Target : access Orientation);
   pragma Import (StdCall, Get_Orientation, "glGetIntegerv");
   procedure Get_Face_Selector (Name : Enums.Getter.Parameter; Target : access Culling.Face_Selector);
   pragma Import (StdCall, Get_Face_Selector, "glGetIntegerv");
   procedure Get_Polygon_Mode (Name : Enums.Getter.Parameter; Target : access Rasterization.Polygon_Mode_Type);
   pragma Import (StdCall, Get_Polygon_Mode, "glGetIntegerv");
   procedure Get_Logic_Op (Name : Enums.Getter.Parameter; Target : access Framebuffer.Logic_Op);
   pragma Import (StdCall, Get_Logic_Op, "glGetIntegerv");
   procedure Get_Stencil_Action (Name : Enums.Getter.Parameter; Target : access Buffers.Stencil_Action);
   pragma Import (StdCall, Get_Stencil_Action, "glGetIntegerv");
   procedure Get_Read_Buffer_Selector (Name : Enums.Getter.Parameter; Target : access Framebuffer.Read_Buffer_Selector);
   pragma Import (StdCall, Get_Read_Buffer_Selector, "glGetIntegerv");
   procedure Get_Light_Color (Name : Enums.Light_Name; Pname : Enums.Light_Param; Target : in out Colors.Color);
   pragma Import (StdCall, Get_Light_Color, "glGetLightfv");
   function Get_String (Name : Enums.Getter.String_Parameter) return C.Strings.chars_ptr;
   pragma Import (StdCall, Get_String, "glGetString");
   Get_String_I : T69;
   procedure Enable (Subject : Toggles.Toggle);
   pragma Import (StdCall, Enable, "glEnable");
   procedure Disable (Subject : Toggles.Toggle);
   pragma Import (StdCall, Disable, "glDisable");
   function Is_Enabled (Subject : Toggles.Toggle) return Low_Level.Bool;
   pragma Import (StdCall, Is_Enabled, "glIsEnabled");
   procedure Cull_Face (Selector : Culling.Face_Selector);
   pragma Import (StdCall, Cull_Face, "glCullFace");
   procedure Front_Face (Face : Orientation);
   pragma Import (StdCall, Front_Face, "glFrontFace");
   procedure Pixel_Store (Param : Enums.Pixel_Store_Param; Value : Low_Level.Bool);
   procedure Pixel_Store (Param : Enums.Pixel_Store_Param; Value : Size);
   procedure Pixel_Store (Param : Enums.Pixel_Store_Param; Value : Pixels.Alignment);
   pragma Import (StdCall, Pixel_Store, "glPixelStorei");
   procedure Matrix_Mode (Mode : Enums.Matrix_Mode);
   pragma Import (StdCall, Matrix_Mode, "glMatrixMode");
   procedure Frustum (Left, Right, Bottom, Top, zNear, zFar : Double);
   pragma Import (StdCall, Frustum, "glFrustum");
   procedure Ortho (Left, Right, Bottom, Top, zNear, zFar : Double);
   pragma Import (StdCall, Ortho, "glOrtho");
   procedure Load_Identity;
   pragma Import (StdCall, Load_Identity, "glLoadIdentity");
   procedure Push_Matrix;
   pragma Import (StdCall, Push_Matrix, "glPushMatrix");
   procedure Pop_Matrix;
   pragma Import (StdCall, Pop_Matrix, "glPopMatrix");
   procedure Rotate (Angle, X, Y, Z : Double);
   pragma Import (StdCall, Rotate, "glRotated");
   procedure Scale (X, Y, Z : Double);
   pragma Import (StdCall, Scale, "glScaled");
   procedure Translate (X, Y, Z : Double);
   pragma Import (StdCall, Translate, "glTranslated");
   procedure GL_Begin (Mode : Connection_Mode);
   pragma Import (StdCall, GL_Begin, "glBegin");
   procedure GL_End;
   pragma Import (StdCall, GL_End, "glEnd");
   procedure Color (Value : Colors.Color);
   pragma Import (StdCall, Color, "glColor4fv");
   Secondary_Color : T70;
   Fog_Coord : T71;
   procedure Vertex_Pointer (Count : Int; Data_Type : Signed_Numeric_Type; Stride : Size; Pointer : Int);
   pragma Import (StdCall, Vertex_Pointer, "glVertexPointer");
   procedure Index_Pointer (Data_Type : Signed_Numeric_Type; Stride : Size; Pointer : Int);
   pragma Import (StdCall, Index_Pointer, "glIndexPointer");
   procedure Color_Pointer (Count : Int; Data_Type : Signed_Numeric_Type; Stride : Size; Pointer : Int);
   pragma Import (StdCall, Color_Pointer, "glColorPointer");
   procedure Enable_Client_State (Cap : Fixed.Client_Side_Capability);
   pragma Import (StdCall, Enable_Client_State, "glEnableClientState");
   procedure Disable_Client_State (Cap : Fixed.Client_Side_Capability);
   pragma Import (StdCall, Disable_Client_State, "glDisableClientState");
   procedure Draw_Arrays (Mode : Connection_Mode; First : Int; Count : Size);
   pragma Import (StdCall, Draw_Arrays, "glDrawArrays");
   Draw_Arrays_Instanced : T72;
   procedure Draw_Elements (Mode : Connection_Mode; Count : Size; Index_Type : Unsigned_Numeric_Type; Indices : Low_Level.IntPtr);
   pragma Import (StdCall, Draw_Elements, "glDrawElements");
   Draw_Elements_Instanced : T73;
   Draw_Elements_Base_Vertex : T74;
   Primitive_Restart_Index : T75;
   Vertex_Attrib_Divisor : T76;
   procedure Load_Matrix (Value : Types.Doubles.Matrix4);
   pragma Import (StdCall, Load_Matrix, "glLoadMatrixd");
   procedure Mult_Matrix (Factor : Types.Doubles.Matrix4);
   pragma Import (StdCall, Mult_Matrix, "glMultMatrixd");
   procedure Vertex4 (Value : Types.Doubles.Vector4);
   pragma Import (StdCall, Vertex4, "glVertex4dv");
   procedure Vertex3 (Value : Types.Doubles.Vector3);
   pragma Import (StdCall, Vertex3, "glVertex3dv");
   procedure Vertex2 (Value : Types.Doubles.Vector2);
   pragma Import (StdCall, Vertex2, "glVertex2dv");
   procedure Normal (Value : Types.Doubles.Vector3);
   pragma Import (StdCall, Normal, "glNormal3dv");
   procedure Tex_Coord4 (Value : Types.Doubles.Vector4);
   pragma Import (StdCall, Tex_Coord4, "glTexCoord4dv");
   procedure Tex_Coord3 (Value : Types.Doubles.Vector3);
   pragma Import (StdCall, Tex_Coord3, "glTexCoord3dv");
   procedure Tex_Coord2 (Value : Types.Doubles.Vector2);
   pragma Import (StdCall, Tex_Coord2, "glTexCoord2dv");
   procedure Light_Model_Color (Param : Enums.Light_Model_Ambient_Parameter; Color : Colors.Color);
   pragma Import (StdCall, Light_Model_Color, "glLightModelfv");
   procedure Light_Model_Color_Control (Param : Enums.Light_Model_CC_Parameter; Value : access constant Fixed.Lighting.Color_Control);
   pragma Import (StdCall, Light_Model_Color_Control, "glLightModeliv");
   procedure Light_Model_Toggles (Param : Enums.Light_Model_Toggle_Parameter; Value : access constant Int);
   pragma Import (StdCall, Light_Model_Toggles, "glLightModeliv");
   procedure Shade_Model (Mode : Fixed.Lighting.Shade_Model);
   pragma Import (StdCall, Shade_Model, "glShadeModel");
   procedure Light_Color (Name : Enums.Light_Name; Pname : Enums.Light_Param; Param : Colors.Color);
   pragma Import (StdCall, Light_Color, "glLightfv");
   procedure Get_Light_Position (Name : Enums.Light_Name; Pname : Enums.Light_Param; Target : in out Types.Singles.Vector4);
   pragma Import (StdCall, Get_Light_Position, "glGetLightfv");
   procedure Get_Light_Direction (Name : Enums.Light_Name; Pname : Enums.Light_Param; Target : in out Types.Singles.Vector3);
   pragma Import (StdCall, Get_Light_Direction, "glGetLightfv");
   procedure Light_Position (Name : Enums.Light_Name; Pname : Enums.Light_Param; Param : Types.Singles.Vector4);
   pragma Import (StdCall, Light_Position, "glLightfv");
   procedure Light_Direction (Name : Enums.Light_Name; Pname : Enums.Light_Param; Param : Types.Singles.Vector3);
   pragma Import (StdCall, Light_Direction, "glLightfv");
   procedure Blend_Func (Src_Factor, Dst_Factor : Blending.Blend_Factor);
   pragma Import (StdCall, Blend_Func, "glBlendFunc");
   Blend_Func_I : T77;
   Blend_Func_Separate : T78;
   Blend_Func_Separate_I : T79;
   Blend_Color : T80;
   Blend_Equation : T81;
   Blend_Equation_I : T82;
   Blend_Equation_Separate : T83;
   Blend_Equation_Separate_I : T84;
   procedure Line_Width (Value : Single);
   pragma Import (StdCall, Line_Width, "glLineWidth");
   procedure Polygon_Mode (Face : Culling.Face_Selector; Value : Rasterization.Polygon_Mode_Type);
   pragma Import (StdCall, Polygon_Mode, "glPolygonMode");
   procedure Set_Point_Size (Value : Single);
   pragma Import (StdCall, Set_Point_Size, "glPointSize");
   Set_Point_Parameter_Single : T85;
   procedure Raster_Pos4 (Value : Types.Doubles.Vector4);
   pragma Import (StdCall, Raster_Pos4, "glRasterPos4dv");
   procedure Raster_Pos3 (Value : Types.Doubles.Vector3);
   pragma Import (StdCall, Raster_Pos3, "glRasterPos3dv");
   procedure Raster_Pos2 (Value : Types.Doubles.Vector2);
   pragma Import (StdCall, Raster_Pos2, "glRasterPos2dv");
   procedure Clear (Bits : Low_Level.Bitfield);
   pragma Import (StdCall, Clear, "glClear");
   procedure Draw_Buffer (Mode : Buffers.Explicit_Color_Buffer_Selector);
   pragma Import (StdCall, Draw_Buffer, "glDrawBuffer");
   Draw_Buffers : T86;
   procedure Clear_Color (Red, Green, Blue, Alpha : Colors.Component);
   pragma Import (StdCall, Clear_Color, "glClearColor");
   procedure Clear_Depth (Depth : Buffers.Depth);
   pragma Import (StdCall, Clear_Depth, "glClearDepth");
   procedure Clear_Stencil (Index : Buffers.Stencil_Index);
   pragma Import (StdCall, Clear_Stencil, "glClearStencil");
   Clear_Accum : T80;
   Clear_Buffer : T87;
   Clear_Draw_Buffer : T88;
   Clear_Buffer_Depth : T89;
   Clear_Buffer_Stencil : T90;
   Clear_Buffer_Depth_Stencil : T91;
   procedure Depth_Mask (Value : Low_Level.Bool);
   pragma Import (StdCall, Depth_Mask, "glDepthMask");
   procedure Depth_Func (Func : Compare_Function);
   pragma Import (StdCall, Depth_Func, "glDepthFunc");
   Stencil_Func_Separate : T92;
   Stencil_Op_Separate : T93;
   Stencil_Mask_Separate : T94;
   procedure Tex_Parameter_Float (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Single);
   pragma Import (StdCall, Tex_Parameter_Float, "glTexParameterf");
   procedure Tex_Parameter_Int (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Int);
   pragma Import (StdCall, Tex_Parameter_Int, "glTexParameteri");
   procedure Tex_Parameter_Min_Filter (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Objects.Textures.Minifying_Function);
   pragma Import (StdCall, Tex_Parameter_Min_Filter, "glTexParameteri");
   procedure Tex_Parameter_Mag_Filter (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Objects.Textures.Magnifying_Function);
   pragma Import (StdCall, Tex_Parameter_Mag_Filter, "glTexParameteri");
   procedure Tex_Parameter_Wrap_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Objects.Textures.Wrapping_Mode);
   pragma Import (StdCall, Tex_Parameter_Wrap_Mode, "glTexParameteri");
   procedure Tex_Parameter_Comp_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Enums.Textures.Compare_Kind);
   pragma Import (StdCall, Tex_Parameter_Comp_Mode, "glTexParameteri");
   procedure Tex_Parameter_Comp_Func (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Compare_Function);
   pragma Import (StdCall, Tex_Parameter_Comp_Func, "glTexParameteri");
   procedure Tex_Parameter_Depth_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Objects.Textures.Depth_Mode);
   pragma Import (StdCall, Tex_Parameter_Depth_Mode, "glTexParameteri");
   procedure Tex_Parameter_Bool (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : Low_Level.Bool);
   pragma Import (StdCall, Tex_Parameter_Bool, "glTexParameteri");
   procedure Tex_Parameter_Floats (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : Low_Level.Single_Array);
   pragma Import (StdCall, Tex_Parameter_Floats, "glTexParameterfv");
   procedure Get_Tex_Parameter_Float (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Value : out Single);
   pragma Import (StdCall, Get_Tex_Parameter_Float, "glGetTexParameterfv");
   procedure Get_Tex_Parameter_Floats (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : in out Low_Level.Single_Array);
   pragma Import (StdCall, Get_Tex_Parameter_Floats, "glGetTexParameterfv");
   procedure Get_Tex_Parameter_Int (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Int);
   pragma Import (StdCall, Get_Tex_Parameter_Int, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Ints (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : in out Low_Level.Int_Array);
   pragma Import (StdCall, Get_Tex_Parameter_Ints, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Wrap_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Objects.Textures.Wrapping_Mode);
   pragma Import (StdCall, Get_Tex_Parameter_Wrap_Mode, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Comp_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Enums.Textures.Compare_Kind);
   pragma Import (StdCall, Get_Tex_Parameter_Comp_Mode, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Comp_Func (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Compare_Function);
   pragma Import (StdCall, Get_Tex_Parameter_Comp_Func, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Depth_Mode (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Objects.Textures.Depth_Mode);
   pragma Import (StdCall, Get_Tex_Parameter_Depth_Mode, "glGetTexParameteriv");
   procedure Get_Tex_Parameter_Bool (Target : Low_Level.Enums.Texture_Kind; Param_Name : Enums.Textures.Parameter; Values : out Low_Level.Bool);
   pragma Import (StdCall, Get_Tex_Parameter_Bool, "glGetTexParameteriv");
   procedure Get_Tex_Level_Parameter_Size (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Param_Name : Enums.Textures.Level_Parameter; Value : out Size);
   pragma Import (StdCall, Get_Tex_Level_Parameter_Size, "glGetTexLevelParameteriv");
   procedure Get_Tex_Level_Parameter_Format (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Param_Name : Enums.Textures.Level_Parameter; Value : out Pixels.Internal_Format);
   pragma Import (StdCall, Get_Tex_Level_Parameter_Format, "glGetTexLevelParameteriv");
   procedure Get_Tex_Level_Parameter_Type (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Param_Name : Enums.Textures.Level_Parameter; Value : out Pixels.Channel_Data_Type);
   pragma Import (StdCall, Get_Tex_Level_Parameter_Type, "glGetTexLevelParameteriv");
   procedure Get_Tex_Level_Parameter_Bool (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Param_Name : Enums.Textures.Level_Parameter; Value : out Low_Level.Bool);
   pragma Import (StdCall, Get_Tex_Level_Parameter_Bool, "glGetTexLevelParameteriv");
   procedure Gen_Textures (N : Size; Textures : out UInt);
   pragma Import (StdCall, Gen_Textures, "glGenTextures");
   procedure Bind_Texture (Target : Low_Level.Enums.Texture_Kind; Texture : UInt);
   pragma Import (StdCall, Bind_Texture, "glBindTexture");
   procedure Delete_Textures (N : Size; Textures : Low_Level.UInt_Array);
   pragma Import (StdCall, Delete_Textures, "glDeleteTextures");
   function Is_Texture (Texture : UInt) return Boolean;
   pragma Import (StdCall, Is_Texture, "glIsTexture");
   procedure Tex_Image_1D (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Internal_Format : Pixels.Internal_Format; Width : Size; Border : Low_Level.Zero; Format : Pixels.Data_Format; Data_Type : Pixels.Data_Type; Data : Objects.Textures.Image_Source);
   pragma Import (StdCall, Tex_Image_1D, "glTexImage1D");
   Compressed_Tex_Image_1D : T95;
   Tex_Sub_Image_1D : T96;
   Tex_Storage_1D : T97;
   procedure Tex_Image_2D (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; Internal_Format : Pixels.Internal_Format; Width, Height : Size; Border : Low_Level.Zero; Format : Pixels.Data_Format; Data_Type : Pixels.Data_Type; Data : Objects.Textures.Image_Source);
   pragma Import (StdCall, Tex_Image_2D, "glTexImage2D");
   Compressed_Tex_Image_2D : T98;
   procedure Tex_Sub_Image_2D (Target : Low_Level.Enums.Texture_Kind; Level : Objects.Textures.Mipmap_Level; X_Offset, Y_Offset : Int; Width, Height : Size; Format : Pixels.Data_Format; Data_Type : Pixels.Data_Type; Data : Objects.Textures.Image_Source);
   pragma Import (StdCall, Tex_Sub_Image_2D, "glTexSubImage2D");
   Tex_Storage_2D : T99;
   Tex_Image_3D : T100;
   Compressed_Tex_Image_3D : T101;
   Tex_Sub_Image_3D : T96;
   Tex_Storage_3D : T102;
   procedure Tex_Env_Float (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Single);
   pragma Import (StdCall, Tex_Env_Float, "glTexEnvf");
   procedure Tex_Env_Int (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Int);
   pragma Import (StdCall, Tex_Env_Int, "glTexEnvi");
   procedure Tex_Env_Tex_Func (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Fixed.Textures.Texture_Function);
   pragma Import (StdCall, Tex_Env_Tex_Func, "glTexEnvi");
   procedure Tex_Env_Combine_Func (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Fixed.Textures.Combine_Function);
   pragma Import (StdCall, Tex_Env_Combine_Func, "glTexEnvi");
   procedure Tex_Env_Source (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Fixed.Textures.Source_Kind);
   pragma Import (StdCall, Tex_Env_Source, "glTexEnvi");
   procedure Tex_Env_Arr (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Low_Level.Single_Array);
   pragma Import (StdCall, Tex_Env_Arr, "glTexEnvfv");
   procedure Tex_Env_Bool (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : Low_Level.Bool);
   pragma Import (StdCall, Tex_Env_Bool, "glTexEnvi");
   procedure Get_Tex_Env_Float (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : out Single);
   pragma Import (StdCall, Get_Tex_Env_Float, "glGetTexEnvfv");
   procedure Get_Tex_Env_Tex_Func (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : out Fixed.Textures.Texture_Function);
   pragma Import (StdCall, Get_Tex_Env_Tex_Func, "glGetTexEnviv");
   procedure Get_Tex_Env_Combine_Func (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : out Fixed.Textures.Combine_Function);
   pragma Import (StdCall, Get_Tex_Env_Combine_Func, "glGetTexEnviv");
   procedure Get_Tex_Env_Source (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : out Fixed.Textures.Source_Kind);
   pragma Import (StdCall, Get_Tex_Env_Source, "glGetTexEnviv");
   procedure Get_Tex_Env_Arr (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : in out Low_Level.Single_Array);
   pragma Import (StdCall, Get_Tex_Env_Arr, "glGetTexEnvfv");
   procedure Get_Tex_Env_Bool (Target : Enums.Textures.Env_Target; Param_Name : Enums.Textures.Env_Parameter; Value : out Low_Level.Bool);
   pragma Import (StdCall, Get_Tex_Env_Bool, "glGetTexEnviv");
   Active_Texture : T103;
   Generate_Mipmap : T104;
   Invalidate_Tex_Image : T105;
   Invalidate_Tex_Sub_Image : T106;
   Gen_Buffers : T107;
   Delete_Buffers : T108;
   Bind_Buffer : T109;
   Bind_Buffer_Base : T110;
   Buffer_Data : T111;
   Texture_Buffer_Data : T112;
   Map_Buffer : T113;
   Buffer_Pointer : T114;
   Buffer_Sub_Data : T115;
   Unmap_Buffer : T116;
   Get_Buffer_Parameter_Access_Kind : T117;
   Get_Buffer_Parameter_Bool : T118;
   Get_Buffer_Parameter_Size : T119;
   Get_Buffer_Parameter_Usage : T120;
   Invalidate_Buffer_Data : T121;
   Invalidate_Buffer_Sub_Data : T122;
   Gen_Vertex_Arrays : T123;
   Delete_Vertex_Arrays : T124;
   Bind_Vertex_Array : T125;
   Gen_Renderbuffers : T126;
   Delete_Renderbuffers : T127;
   Renderbuffer_Storage : T128;
   Renderbuffer_Storage_Multisample : T129;
   Bind_Renderbuffer : T130;
   Get_Renderbuffer_Parameter_Int : T131;
   Get_Renderbuffer_Parameter_Internal_Format : T132;
   procedure Read_Pixels (X, Y : Int; Width, Height : Size; Format : Pixels.Framebuffer_Format; Data_Type : Pixels.Data_Type; Data : System.Address);
   pragma Import (StdCall, Read_Pixels, "glReadPixels");
   procedure Logic_Op (Value : Framebuffer.Logic_Op);
   pragma Import (StdCall, Logic_Op, "glLogicOp");
   Clamp_Color : T133;
   procedure Read_Buffer (Value : Framebuffer.Read_Buffer_Selector);
   pragma Import (StdCall, Read_Buffer, "glReadBuffer");
   Gen_Framebuffers : T134;
   Delete_Framebuffers : T135;
   Bind_Framebuffer : T136;
   Check_Framebuffer_Status : T137;
   Framebuffer_Renderbuffer : T138;
   Framebuffer_Texture : T139;
   Framebuffer_Texture_Layer : T140;
   Blit_Framebuffer : T141;
   Invalidate_Framebuffer : T142;
   Invalidate_Sub_Framebuffer : T143;
   Framebuffer_Parameter_Size : T144;
   Framebuffer_Parameter_Bool : T145;
   Get_Framebuffer_Parameter_Size : T146;
   Get_Framebuffer_Parameter_Bool : T147;
   Get_Shader_Param : T148;
   Get_Shader_Type : T149;
   Create_Shader : T150;
   Delete_Shader : T151;
   Shader_Source : T152;
   Get_Shader_Source : T153;
   Compile_Shader : T151;
   Release_Shader_Compiler : T154;
   Get_Shader_Info_Log : T153;
   Create_Program : T155;
   Delete_Program : T156;
   Get_Program_Param : T157;
   Attach_Shader : T158;
   Link_Program : T156;
   Get_Program_Info_Log : T159;
   Get_Program_Stage : T160;
   Get_Subroutine_Index : T161;
   Get_Subroutine_Uniform_Location : T162;
   Use_Program : T156;
   Validate_Program : T156;
   Get_Uniform_Location : T163;
   Bind_Attrib_Location : T164;
   Get_Attrib_Location : T165;
   Vertex_Attrib_Pointer : T166;
   Vertex_AttribI_Pointer : T167;
   Vertex_AttribL_Pointer : T167;
   Enable_Vertex_Attrib_Array : T168;
   Disable_Vertex_Attrib_Array : T168;
   Get_Attached_Shaders : T169;
   Bind_Frag_Data_Location : T170;
   Get_Frag_Data_Location : T171;
   Begin_Transform_Feedback : T172;
   End_Transform_Feedback : T154;
   Get_Transform_Feedback_Varying : T173;
   Transform_Feedback_Varyings : T174;
   Set_Patch_Parameter_Int : T175;
   Set_Patch_Parameter_Float_Array : T176;
   procedure Depth_Range (Near, Far : Double);
   pragma Import (StdCall, Depth_Range, "glDepthRange");
   procedure Viewport (X, Y : Int; Width, Height : Size);
   pragma Import (StdCall, Viewport, "glViewport");
end GL.API;
